from flask import Blueprint, request, jsonify, send_file
from csv_analyzer import run_agent_processing, score_manager
from rubric_handler import load_rubric
import io

agent_routes = Blueprint('agent_routes', __name__)

@agent_routes.route('/api/process-with-agents', methods=['POST'])
def process_with_agents():
    """
    Process CSV file and rubric using the multi-agent system
    """
    try:
        if 'csv_file' not in request.files:
            return jsonify({'error': 'No CSV file provided'}), 400
        
        csv_file = request.files['csv_file']
        if csv_file.filename == '':
            return jsonify({'error': 'No file selected'}), 400
        
        # Get rubric from form or use default
        rubric_text = request.form.get('rubric')
        if not rubric_text:
            rubric_text = load_rubric()
        
        if not rubric_text:
            return jsonify({'error': 'No rubric provided'}), 400
        
        # Process using multi-agent system
        result = run_agent_processing(csv_file, rubric_text)
        
        if 'error' in result:
            return jsonify({'error': result['error']}), 500
        
        # Store results in score manager for compatibility
        if 'results' in result:
            flattened_scores = []
            for student_result in result['results']:
                score_entry = {
                    'name': student_result.get('student_name', ''),
                    'repo_url': student_result.get('repo_url', ''),
                    'ai_percentage': student_result.get('ai_percentage', 0),
                    'status': student_result.get('status', 'unknown')
                }
                
                # Add scores
                scores = student_result.get('scores', {})
                for criterion, score_data in scores.items():
                    if isinstance(score_data, dict):
                        score_entry[f"{criterion}_score"] = score_data.get('mark', '')
                        score_entry[f"{criterion}_justification"] = score_data.get('justification', '')
                    else:
                        score_entry[criterion] = score_data
                
                flattened_scores.append(score_entry)
            
            score_manager.add_scores(flattened_scores)
        
        return jsonify({
            'message': 'Processing completed successfully',
            'summary': result.get('summary', {}),
            'total_processed': len(result.get('results', [])),
            'status': 'success'
        })
        
    except Exception as e:
        return jsonify({'error': f'Processing failed: {str(e)}'}), 500

@agent_routes.route('/api/download-agent-report', methods=['GET'])
def download_agent_report():
    """
    Download the Excel report generated by the report agent
    """
    try:
        # Get the latest results from score manager
        scores = score_manager.get_scores()
        
        if not scores:
            return jsonify({'error': 'No assessment results available'}), 404
        
        # Generate Excel file
        from csv_analyzer import generate_scores_excel
        excel_file = generate_scores_excel(scores)
        
        return send_file(
            excel_file,
            as_attachment=True,
            download_name='agent_assessment_results.xlsx',
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
    except Exception as e:
        return jsonify({'error': f'Report generation failed: {str(e)}'}), 500

@agent_routes.route('/api/agent-status', methods=['GET'])
def get_agent_status():
    """
    Get the current status of all agents
    """
    try:
        from agents.orchestrator import AgentOrchestrator
        orchestrator = AgentOrchestrator()
        
        status = {
            'csv_agent': orchestrator.csv_agent.status.value,
            'repo_agent': orchestrator.repo_agent.status.value,
            'grading_agent': orchestrator.grading_agent.status.value,
            'ai_detection_agent': orchestrator.ai_detection_agent.status.value,
            'report_agent': orchestrator.report_agent.status.value
        }
        
        return jsonify({'agent_status': status})
        
    except Exception as e:
        return jsonify({'error': f'Status check failed: {str(e)}'}), 500